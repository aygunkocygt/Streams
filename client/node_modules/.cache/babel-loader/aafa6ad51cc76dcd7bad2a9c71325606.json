{"ast":null,"code":"import _classCallCheck from \"C:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\projeler\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamForm, _React$Component);\n\n  function StreamForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      var className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \" \", label, \" \"), React.createElement(\"input\", Object.assign({\n        style: {\n          width: 300\n        },\n        className: \"ui fluid input\"\n      }, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      _this.props.onSubmit(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamForm, [{\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var error = _ref2.error,\n          touched = _ref2.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 8\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, error)));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        style: {\n          marginLeft: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Title \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), React.createElement(Field, {\n        className: \"ui fluid input\",\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Description \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamForm;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate: validate\n})(StreamForm);","map":{"version":3,"sources":["C:\\projeler\\streams\\client\\src\\components\\streams\\StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","renderInput","input","label","meta","className","error","touched","width","renderError","onSubmit","formValues","props","handleSubmit","marginLeft","Component","validate","errors","title","description","form"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nclass StreamForm extends React.Component {\r\n  renderError({ error, touched }) {\r\n    if (touched && error) {\r\n      return (\r\n        <div className=\"ui error message\">\r\n          <div className=\"content\">\r\n          <div className=\"header\">{error}</div>\r\n          </div>\r\n         \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderInput = ({ input, label, meta }) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return (\r\n      <div className={className}> \r\n        <label > {label} </label>\r\n        <input style={{width:300}} className=\"ui fluid input\" {...input} autoComplete='off' />\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  onSubmit = formValues => {\r\n    this.props.onSubmit(formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n        className='ui form error' style={{marginLeft:5}}\r\n      >\r\n          <Field name=\"title\" component={this.renderInput} label='Title ' />\r\n          <Field\r\n          className=\"ui fluid input\"\r\n            name='description'\r\n            component={this.renderInput}\r\n            label='Description '\r\n          />\r\n          <button className='ui button primary'>\r\n            Submit\r\n          </button>\r\n     \r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst validate = formValues => {\r\n  const errors = {};\r\n\r\n  if (!formValues.title) {\r\n    errors.title = 'You must enter a title';\r\n  }\r\n\r\n  if (!formValues.description) {\r\n    errors.description = 'You must enter a description';\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport default reduxForm({\r\n  form: 'streamForm',\r\n  validate\r\n})(StreamForm);\r\n"]},"metadata":{},"sourceType":"module"}