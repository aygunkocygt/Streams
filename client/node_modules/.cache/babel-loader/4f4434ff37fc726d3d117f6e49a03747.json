{"ast":null,"code":"import _classCallCheck from \"c:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"c:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"c:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"c:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _createClass from \"c:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"c:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport Log from '../utils/logger.js';\nimport { BaseLoader, LoaderStatus, LoaderErrors } from './loader.js';\nimport { RuntimeException } from '../utils/exception.js'; // For FireFox browser which supports `xhr.responseType = 'moz-chunked-arraybuffer'`\n\nvar MozChunkedLoader =\n/*#__PURE__*/\nfunction (_BaseLoader) {\n  _inherits(MozChunkedLoader, _BaseLoader);\n\n  _createClass(MozChunkedLoader, null, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      try {\n        var xhr = new XMLHttpRequest(); // Firefox 37- requires .open() to be called before setting responseType\n\n        xhr.open('GET', 'https://example.com', true);\n        xhr.responseType = 'moz-chunked-arraybuffer';\n        return xhr.responseType === 'moz-chunked-arraybuffer';\n      } catch (e) {\n        Log.w('MozChunkedLoader', e.message);\n        return false;\n      }\n    }\n  }]);\n\n  function MozChunkedLoader(seekHandler, config) {\n    var _this;\n\n    _classCallCheck(this, MozChunkedLoader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MozChunkedLoader).call(this, 'xhr-moz-chunked-loader'));\n    _this.TAG = 'MozChunkedLoader';\n    _this._seekHandler = seekHandler;\n    _this._config = config;\n    _this._needStash = true;\n    _this._xhr = null;\n    _this._requestAbort = false;\n    _this._contentLength = null;\n    _this._receivedLength = 0;\n    return _this;\n  }\n\n  _createClass(MozChunkedLoader, [{\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.isWorking()) {\n        this.abort();\n      }\n\n      if (this._xhr) {\n        this._xhr.onreadystatechange = null;\n        this._xhr.onprogress = null;\n        this._xhr.onloadend = null;\n        this._xhr.onerror = null;\n        this._xhr = null;\n      }\n\n      _get(_getPrototypeOf(MozChunkedLoader.prototype), \"destroy\", this).call(this);\n    }\n  }, {\n    key: \"open\",\n    value: function open(dataSource, range) {\n      this._dataSource = dataSource;\n      this._range = range;\n      var sourceURL = dataSource.url;\n\n      if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\n        sourceURL = dataSource.redirectedURL;\n      }\n\n      var seekConfig = this._seekHandler.getConfig(sourceURL, range);\n\n      this._requestURL = seekConfig.url;\n      var xhr = this._xhr = new XMLHttpRequest();\n      xhr.open('GET', seekConfig.url, true);\n      xhr.responseType = 'moz-chunked-arraybuffer';\n      xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n      xhr.onprogress = this._onProgress.bind(this);\n      xhr.onloadend = this._onLoadEnd.bind(this);\n      xhr.onerror = this._onXhrError.bind(this); // cors is auto detected and enabled by xhr\n      // withCredentials is disabled by default\n\n      if (dataSource.withCredentials) {\n        xhr.withCredentials = true;\n      }\n\n      if (typeof seekConfig.headers === 'object') {\n        var headers = seekConfig.headers;\n\n        for (var key in headers) {\n          if (headers.hasOwnProperty(key)) {\n            xhr.setRequestHeader(key, headers[key]);\n          }\n        }\n      } // add additional headers\n\n\n      if (typeof this._config.headers === 'object') {\n        var _headers = this._config.headers;\n\n        for (var _key in _headers) {\n          if (_headers.hasOwnProperty(_key)) {\n            xhr.setRequestHeader(_key, _headers[_key]);\n          }\n        }\n      }\n\n      this._status = LoaderStatus.kConnecting;\n      xhr.send();\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this._requestAbort = true;\n\n      if (this._xhr) {\n        this._xhr.abort();\n      }\n\n      this._status = LoaderStatus.kComplete;\n    }\n  }, {\n    key: \"_onReadyStateChange\",\n    value: function _onReadyStateChange(e) {\n      var xhr = e.target;\n\n      if (xhr.readyState === 2) {\n        // HEADERS_RECEIVED\n        if (xhr.responseURL != undefined && xhr.responseURL !== this._requestURL) {\n          if (this._onURLRedirect) {\n            var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n\n            this._onURLRedirect(redirectedURL);\n          }\n        }\n\n        if (xhr.status !== 0 && (xhr.status < 200 || xhr.status > 299)) {\n          this._status = LoaderStatus.kError;\n\n          if (this._onError) {\n            this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {\n              code: xhr.status,\n              msg: xhr.statusText\n            });\n          } else {\n            throw new RuntimeException('MozChunkedLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\n          }\n        } else {\n          this._status = LoaderStatus.kBuffering;\n        }\n      }\n    }\n  }, {\n    key: \"_onProgress\",\n    value: function _onProgress(e) {\n      if (this._status === LoaderStatus.kError) {\n        // Ignore error response\n        return;\n      }\n\n      if (this._contentLength === null) {\n        if (e.total !== null && e.total !== 0) {\n          this._contentLength = e.total;\n\n          if (this._onContentLengthKnown) {\n            this._onContentLengthKnown(this._contentLength);\n          }\n        }\n      }\n\n      var chunk = e.target.response;\n      var byteStart = this._range.from + this._receivedLength;\n      this._receivedLength += chunk.byteLength;\n\n      if (this._onDataArrival) {\n        this._onDataArrival(chunk, byteStart, this._receivedLength);\n      }\n    }\n  }, {\n    key: \"_onLoadEnd\",\n    value: function _onLoadEnd(e) {\n      if (this._requestAbort === true) {\n        this._requestAbort = false;\n        return;\n      } else if (this._status === LoaderStatus.kError) {\n        return;\n      }\n\n      this._status = LoaderStatus.kComplete;\n\n      if (this._onComplete) {\n        this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n      }\n    }\n  }, {\n    key: \"_onXhrError\",\n    value: function _onXhrError(e) {\n      this._status = LoaderStatus.kError;\n      var type = 0;\n      var info = null;\n\n      if (this._contentLength && e.loaded < this._contentLength) {\n        type = LoaderErrors.EARLY_EOF;\n        info = {\n          code: -1,\n          msg: 'Moz-Chunked stream meet Early-Eof'\n        };\n      } else {\n        type = LoaderErrors.EXCEPTION;\n        info = {\n          code: -1,\n          msg: e.constructor.name + ' ' + e.type\n        };\n      }\n\n      if (this._onError) {\n        this._onError(type, info);\n      } else {\n        throw new RuntimeException(info.msg);\n      }\n    }\n  }]);\n\n  return MozChunkedLoader;\n}(BaseLoader);\n\nexport default MozChunkedLoader;","map":null,"metadata":{},"sourceType":"module"}