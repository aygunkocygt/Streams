{"ast":null,"code":"import _classCallCheck from \"C:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\projeler\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\projeler\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamCreate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamCreate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      display: null\n    };\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"col-form-label\",\n        style: {\n          paddingRight: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, label, \" \"), React.createElement(\"input\", Object.assign({\n        className: \"form-control\",\n        style: {\n          width: 200\n        }\n      }, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var _this2 = this;\n\n      var error = _ref2.error,\n          touched = _ref2.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"alert-light\",\n          style: {\n            marginTop: 3\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          class: \"close\",\n          onClick: function onClick() {\n            _this2.setState({\n              display: 'none'\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, \"\\xD7\"), React.createElement(\"p\", {\n          className: \"text-danger\",\n          style: this.state,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValues) {\n      console.log(formValues);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"form-group\",\n        style: {\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Title \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Description \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        style: {\n          marginTop: 10\n        },\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component);\n\n;\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["C:\\projeler\\streams\\client\\src\\components\\streams\\StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","state","display","renderInput","input","label","meta","paddingRight","width","renderError","error","touched","marginTop","setState","formValues","console","log","props","handleSubmit","onSubmit","justifyContent","Component","validate","errors","title","description","form"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\n\r\nclass StreamCreate extends React.Component{\r\n    state = {\r\n        display: null\r\n    };\r\n \r\n    \r\n   renderError({ error, touched}){\r\n       if(touched && error){\r\n           return(\r\n               <div className=\"alert-light\" style={{marginTop:3}}>\r\n               <button type=\"button\" class=\"close\" onClick={()=> {this.setState({display : 'none'})}} >&times;</button>\r\n               <p className=\"text-danger\" style={this.state}>{error}</p>\r\n               </div>\r\n           );\r\n       }\r\n   }\r\n\r\n\r\n    renderInput = ({ input, label,meta }) => {\r\n      return (\r\n      <div>\r\n      <label className=\"col-form-label\" style={{paddingRight:5}}>{label} </label>\r\n      <input className=\"form-control\" style={{width:200}} {...input}  autoComplete=\"off\" />\r\n      {this.renderError(meta)}\r\n      </div>\r\n  \r\n   );\r\n}\r\n\r\nonSubmit(formValues){\r\n    console.log(formValues);\r\n}\r\n\r\n    render(){\r\n        return(\r\n        <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"form-group\" style={{display: 'flex', justifyContent:'center'}}>\r\n            <fieldset>\r\n            <Field name=\"title\" component={this.renderInput} label=\"Title \" />\r\n            <Field name=\"description\" component={this.renderInput} label=\"Description \" />\r\n            <button style={{marginTop:10}} className=\"btn btn-primary\">Submit</button>\r\n            </fieldset>\r\n        </form>\r\n        );\r\n    \r\n    }\r\n};\r\n\r\nconst validate = (formValues) => {\r\n    \r\n    const errors = {};\r\n\r\n    if(!formValues.title){\r\n        errors.title = 'You must enter a title';\r\n    }\r\n\r\n    if(!formValues.description){\r\n        errors.description = 'You must enter a description';\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport default reduxForm({\r\n    form: 'streamCreate',\r\n    validate\r\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}